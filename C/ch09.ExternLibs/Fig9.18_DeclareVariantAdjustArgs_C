
// External function requiring NVIDIA GPU device pointers
void vecadd_nvptx(int N, float *A, float *B, float *C);

#pragma omp declare variant(vecadd_nvptx) match(device={arch(nvptx)}) \
                        adjust_args(need_device_ptr: A, B, C)
void vecadd_target(int N, float *A, float *B, float *C) { // Base function

  #pragma omp target loop
  for (int i = 0; i < N; ++i) {
    C[i] = A[i] + B[i];
  }
}

int main()
{

   int N = 4000;
   float A[N], B[N], C[N];  // initialization not shown

   // Map to the device
   #pragma omp target enter data map(to: A, B, C)

   // Run vecadd on a device
   vecadd_target(N, A, B, C);

   // Check results omitted
}	  

