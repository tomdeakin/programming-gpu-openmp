
#define Bsize 32
int Nblk = Ndim / Bsize;
int Mblk = Mdim / Bsize;
int Pblk = Pdim / Bsize;

double Ablk[Bsize][Bsize]; // Team-local copies of tiles
double Bblk[Bsize][Bsize];

#pragma omp target data map(tofrom:C[0:Ndim*Mdim]) \
                      map(to:B[0:Pdim*Mdim], A[0:Ndim*Pdim])
{
  #pragma omp target uses_allocators(omp_pteam_mem_alloc)
  #pragma omp teams distribute collapse(2) num_teams(Nblk*Mblk) \
                          thread_limit(Bsize*Bsize) \
                          allocate(omp_pteam_mem_alloc: Awrk, Bwrk) \
                          private(Awrk, Bwrk)
  for (int ib = 0; ib < Nblk; ib++) {  // Loop over blocks of C
    for (int jb = 0; jb < Mblk; jb++) {
      for (kb = 0; kb < Pblk; kb++) {  // Loop over blocks
  
        #pragma omp parallel num_threads(Bsize*Bsize)
        {
          // Copy block of A into pteam memory
          #pragma omp for collapse(2) nowait
          for (i = ib*Bsize; i < ((ib+1)*Bsize); i++) {
            for(k = kb*Bsize; k < ((kb+1)*Bsize); k++) {
              Awrk[(i%Bsize)*Bsize + (k%Bsize)] = A[i*Pdim+k];
          }}
        
          // Copy block of B into pteam memory
          #pragma omp for collapse(2)
          for (j = jb*Bsize; j < ((jb+1)*Bsize); j++) {
            for(k = kb*Bsize; k < ((kb+1)*Bsize); k++) {
              Bwrk[(k%Bsize)*Bsize + (j%Bsize)] = B[k*Mdim+j];
          }}
        
          // matrix multiply block
          #pragma omp for collapse(2)
          for (i = ib*Bsize; i < ((ib+1)*Bsize); i++) {
            for (j = jb*Bsize; j < ((jb+1)*Bsize); j++) {
              for(k = kb*Bsize; k < ((kb+1)*Bsize); k++) {
                C[i*Mdim+j] += Awrk[(i%Bsize)*Bsize + (k%Bsize)] * Bwrk[(k%Bsize)*Bsize + (j%Bsize)];
           }}}
         }
  }}}
}

